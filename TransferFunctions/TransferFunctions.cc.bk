//
//  TransferFunctions.cc
//  
//
//  Created by Lieselotte Moreels on 25/01/16.
//
//

#include "../interface/TransferFunctions.h"

const std::string TransferFunctions::histoNames[] = {"Eparton_vs_Eparton-Ebjet", "Eparton_vs_Thparton-Thbjet", "Eparton_vs_Etaparton-Etabjet", "Eparton_vs_Phiparton-Phibjet", "Eparton_vs_Eparton-Enonbjet", "Eparton_vs_Thparton-Thnonbjet", "Eparton_vs_Etaparton-Etanonbjet", "Eparton_vs_Phiparton-Phinonbjet", "InvPtgenMu_vs_InvPtgenMu-InvPtrecMu", "InvPtgenMu_vs_ThgenMu-ThrecMu", "InvPtgenMu_vs_EtagenMu-EtarecMu", "InvPtgenMu_vs_PhigenMu-PhirecMu", "EgenEl_vs_EgenEl-ErecEl", "genEl_vs_ThgenEl-ThrecEl", "EgenEl_vs_EtagenEl-EtarecEl", "EgenEl_vs_PhigenEl-PhirecEl"};

const std::string TransferFunctions::histoDescription[] = {"b jet energy", "b jet theta", "b jet eta", "b jet phi", "non-b jet energy", "non-b jet theta", "non-b jet eta", "non-b jet phi", "muon inv. pt", "muon theta", "muon eta", "muon phi", "electron energy", "electron theta", "electron eta", "electron phi"};


TransferFunctions::TransferFunctions(bool calculateTransferFunctions):
muon(false), electron(false), getHistos(false), histoTr2D(), inputFileName("PlotsForTransferFunctions.root"), nHistos(sizeof(histoNames)/sizeof(histoNames[0]))
{
  std::cout << "TransferFunctions::TransferFunctions - Initialising..." << std::endl;
  
  if (calculateTransferFunctions)
  {
    bookHistograms();
  }
  else
  {
    std::cout << "Using transfer functions from file..." << std::endl;
  }
}

TransferFunctions::~TransferFunctions()
{
  /// Clean output files, etc.
}

std::string TransferFunctions::toStr(int number)
{
  std::ostringstream convert;
  convert.clear();
  convert << number;
  return convert.str();
}

void TransferFunctions::bookHistograms()
{
  std::cout << "TransferFunctions::bookHistograms - Initialising..." << std::endl;
  
  /// Energy, pT
  histoTr2D["Eparton_vs_Enonbjet"] = new TH2F("Eparton_vs_Enonbjet","Eparton_vs_Enonbjet", 50, 0, 400, 50, 0, 400);
  histoTr2D["Eparton_vs_Eparton-Enonbjet"] = new TH2F("Eparton_vs_Eparton-Enonbjet","Eparton_vs_Eparton-Enonbjet", 4, 0, 250, 100, -100, 100);
  histoTr2D["Eparton_vs_Ebjet"] = new TH2F("Eparton_vs_Ebjet","Eparton_vs_Ebjet", 50, 0, 400, 50, 0, 400);
  histoTr2D["Eparton_vs_Eparton-Ebjet"] = new TH2F("Eparton_vs_Eparton-Ebjet","Eparton_vs_Eparton-Ebjet", 4, 0, 300, 100, -100, 100);
  histoTr2D["EgenEl_vs_ErecEl"] = new TH2F("EgenEl_vs_ErecEl","EgenEl_vs_ErecEl", 50, 0, 400, 50, 0, 400);
  histoTr2D["EgenEl_vs_EgenEl-ErecEl"] = new TH2F("EgenEl_vs_EgenEl-ErecEl","EgenEl_vs_EgenEl-ErecEl", 50, 0, 400, 100, -50, 50);
  histoTr2D["InvPtgenMu_vs_InvPtrecMu"] = new TH2F("InvPtgenMu_vs_InvPtrecMu","InvPtgenMu_vs_InvPtrecMu", 50, 0, 0.05, 50, 0, 0.05);
  histoTr2D["InvPtgenMu_vs_InvPtgenMu-InvPtrecMu"] = new TH2F("InvPtgenMu_vs_InvPtgenMu-InvPtrecMu","InvPtgenMu_vs_InvPtgenMu-InvPtrecMu", 5, 0.002, 0.04, 100, -0.003, 0.003);
  
  /// Theta
  histoTr2D["Thparton_vs_Thnonbjet"] = new TH2F("Thparton_vs_Thnonbjet","Thparton_vs_Thnonbjet", 60, 0, 3.15, 60, 0, 3.15);
  histoTr2D["Thparton_vs_Thparton-Thnonbjet"] = new TH2F("Thparton_vs_Thparton-Thnonbjet","Thparton_vs_Thparton-Thnonbjet", 5, 0.1, 3.0, 60, -0.15, 0.15);
  histoTr2D["Thparton_vs_Thbjet"] = new TH2F("Thparton_vs_Thbjet","Thparton_vs_Thbjet", 60, 0, 3.15, 60, 0, 3.15);
  histoTr2D["Thparton_vs_Thparton-Thbjet"] = new TH2F("Thparton_vs_Thparton-Thbjet","Thparton_vs_Thparton-Thbjet", 5, 0.1, 3.0, 60, -0.15, 0.15);
  histoTr2D["ThgenEl_vs_ThrecEl"] = new TH2F("ThgenEl_vs_ThrecEl","ThgenEl_vs_ThrecEl", 60, 0, 3.15, 60, 0, 3.15);
  histoTr2D["ThgenEl_vs_ThgenEl-ThrecEl"] = new TH2F("ThgenEl_vs_ThgenEl-ThrecEl","ThgenEl_vs_ThgenEl-ThrecEl", 5, 0.2, 3.0, 60, -0.05, 0.05);
  histoTr2D["ThgenMu_vs_ThrecMu"] = new TH2F("ThgenMu_vs_ThrecMu","ThgenMu_vs_ThrecMu", 60, 0, 3.15, 60, 0, 3.15);
  histoTr2D["ThgenMu_vs_ThgenMu-ThrecMu"] = new TH2F("ThgenMu_vs_ThgenMu-ThrecMu","ThgenMu_vs_ThgenMu-ThrecMu", 5, 0.2, 3.0, 60, -0.05, 0.05);
  
  /// Energy, pT vs theta
  histoTr2D["Eparton_vs_Thnonbjet"] = new TH2F("Eparton_vs_Thnonbjet","Eparton_vs_Thnonbjet", 50, 0, 400, 60, 0, 3.15);
  histoTr2D["Eparton_vs_Thparton-Thnonbjet"] = new TH2F("Eparton_vs_Thparton-Thnonbjet","Eparton_vs_Thparton-Thnonbjet", 4, 0, 250, 100, -0.15, 0.15);
  histoTr2D["Eparton_vs_Thbjet"] = new TH2F("Eparton_vs_Thbjet","Eparton_vs_Thbjet", 50, 0, 400, 60, 0, 3.15);
  histoTr2D["Eparton_vs_Thparton-Thbjet"] = new TH2F("Eparton_vs_Thparton-Thbjet","Eparton_vs_Thparton-Thbjet", 4, 0, 300, 100, -0.15, 0.15);
  histoTr2D["EgenEl_vs_ThrecEl"] = new TH2F("EgenEl_vs_ThrecEl","EgenEl_vs_ThrecEl", 50, 0, 400, 60, 0, 3.15);
  histoTr2D["EgenEl_vs_ThgenEl-ThrecEl"] = new TH2F("EgenEl_vs_ThgenEl-ThrecEl","EgenEl_vs_ThgenEl-ThrecEl", 5, 0, 400, 100, -0.05, 0.05);
  histoTr2D["InvPtgenMu_vs_ThrecMu"] = new TH2F("InvPtgenMu_vs_ThrecMu","InvPtgenMu_vs_ThrecMu", 50, 0, 0.05, 60, 0, 3.15);
  histoTr2D["InvPtgenMu_vs_ThgenMu-ThrecMu"] = new TH2F("InvPtgenMu_vs_ThgenMu-ThrecMu","InvPtgenMu_vs_ThgenMu-ThrecMu", 5, 0.002, 0.04, 100, -0.002, 0.002);
  
  /// Eta
  histoTr2D["Etaparton_vs_Etanonbjet"] = new TH2F("Etaparton_vs_Etanonbjet","Etaparton_vs_Etanonbjet", 60, 0, 2.5, 60, 0, 2.5);
  histoTr2D["Etaparton_vs_Etaparton-Etanonbjet"] = new TH2F("Etaparton_vs_Etaparton-Etanonbjet","Etaparton_vs_Etaparton-Etanonbjet", 5, 0.1, 2.4, 60, -0.15, 0.15);
  histoTr2D["Etaparton_vs_Etabjet"] = new TH2F("Etaparton_vs_Etabjet","Etaparton_vs_Etabjet", 60, 0, 2.5, 60, 0, 2.5);
  histoTr2D["Etaparton_vs_Etaparton-Etabjet"] = new TH2F("Etaparton_vs_Etaparton-Etabjet","Etaparton_vs_Etaparton-Etabjet", 5, 0.1, 2.4, 60, -0.15, 0.15);
  histoTr2D["EtagenEl_vs_EtarecEl"] = new TH2F("EtagenEl_vs_EtarecEl","EtagenEl_vs_EtarecEl", 60, 0, 2.5, 60, 0, 2.5);
  histoTr2D["EtagenEl_vs_EtagenEl-EtarecEl"] = new TH2F("EtagenEl_vs_EtagenEl-EtarecEl","EtagenEl_vs_EtagenEl-EtarecEl", 5, 0.1, 2.1, 60, -0.05, 0.05);
  histoTr2D["EtagenMu_vs_EtarecMu"] = new TH2F("EtagenMu_vs_EtarecMu","EtagenMu_vs_EtarecMu", 60, 0, 2.5, 60, 0, 2.5);
  histoTr2D["EtagenMu_vs_EtagenMu-EtarecMu"] = new TH2F("EtagenMu_vs_EtagenMu-EtarecMu","EtagenMu_vs_EtagenMu-EtarecMu", 5, 0.1, 2.1, 60, -0.05, 0.05);
  
  /// Energy, pT vs eta
  histoTr2D["Eparton_vs_Etanonbjet"] = new TH2F("Eparton_vs_Etanonbjet","Eparton_vs_Etanonbjet", 50, 0, 400, 60, 0, 2.5);
  histoTr2D["Eparton_vs_Etaparton-Etanonbjet"] = new TH2F("Eparton_vs_Etaparton-Etanonbjet","Eparton_vs_Etaparton-Etanonbjet", 4, 0, 250, 100, -0.15, 0.15);
  histoTr2D["Eparton_vs_Etabjet"] = new TH2F("Eparton_vs_Etabjet","Eparton_vs_Etabjet", 50, 0, 400, 60, 0, 2.5);
  histoTr2D["Eparton_vs_Etaparton-Etabjet"] = new TH2F("Eparton_vs_Etaparton-Etabjet","Eparton_vs_Etaparton-Etabjet", 4, 0, 300, 100, -0.15, 0.15);
  histoTr2D["EgenEl_vs_EtarecEl"] = new TH2F("EgenEl_vs_EtarecEl","EgenEl_vs_EtarecEl", 50, 0, 400, 60, 0, 2.5);
  histoTr2D["EgenEl_vs_EtagenEl-EtarecEl"] = new TH2F("EgenEl_vs_EtagenEl-EtarecEl","EgenEl_vs_EtagenEl-EtarecEl", 5, 0, 400, 100, -0.05, 0.05);
  histoTr2D["InvPtgenMu_vs_EtarecMu"] = new TH2F("InvPtgenMu_vs_EtarecMu","InvPtgenMu_vs_EtarecMu", 50, 0, 0.05, 60, 0, 2.5);
  histoTr2D["InvPtgenMu_vs_EtagenMu-EtarecMu"] = new TH2F("InvPtgenMu_vs_EtagenMu-EtarecMu","InvPtgenMu_vs_EtagenMu-EtarecMu", 5, 0.002, 0.04, 100, -0.05, 0.05);
  
  /// Phi
  histoTr2D["Phiparton_vs_Phinonbjet"] = new TH2F("Phiparton_vs_Phinonbjet","Phiparton_vs_Phinonbjet", 120, -3.2, 3.2, 120, -3.2, 3.2);
  histoTr2D["Phiparton_vs_Phiparton-Phinonbjet"] = new TH2F("Phiparton_vs_Phiparton-Phinonbjet","Phiparton_vs_Phiparton-Phinonbjet", 5, -3.2, 3.2, 120, -0.3, 0.3);
  histoTr2D["Phiparton_vs_Phibjet"] = new TH2F("Phiparton_vs_Phibjet","Phiparton_vs_Phibjet", 120, -3.2, 3.2, 120, -3.2, 3.2);
  histoTr2D["Phiparton_vs_Phiparton-Phibjet"] = new TH2F("Phiparton_vs_Phiparton-Phibjet","Phiparton_vs_Phiparton-Phibjet", 5, -3.2, 3.2, 120, -0.3, 0.3);
  histoTr2D["PhigenEl_vs_PhirecEl"] = new TH2F("PhigenEl_vs_PhirecEl","PhigenEl_vs_PhirecEl", 120, -3.2, 3.2, 120, -3.2, 3.2);
  histoTr2D["PhigenEl_vs_PhigenEl-PhirecEl"] = new TH2F("PhigenEl_vs_PhigenEl-PhirecEl","PhigenEl_vs_PhigenEl-PhirecEl", 5, -3.2, 3.2, 120, -0.05, 0.05);
  histoTr2D["PhigenMu_vs_PhirecMu"] = new TH2F("PhigenMu_vs_PhirecMu","PhigenMu_vs_PhirecMu", 120, -3.2, 3.2, 120, -3.2, 3.2);
  histoTr2D["PhigenMu_vs_PhigenMu-PhirecMu"] = new TH2F("PhigenMu_vs_PhigenMu-PhirecMu","PhigenMu_vs_PhigenMu-PhirecMu", 5, -3.2, 3.2, 120, -0.05, 0.05);
  
  /// Energy, pT vs phi
  histoTr2D["Eparton_vs_Phinonbjet"] = new TH2F("Eparton_vs_Phinonbjet","Eparton_vs_Phinonbjet", 50, 0, 400, 120, -3.2, 3.2);
  histoTr2D["Eparton_vs_Phiparton-Phinonbjet"] = new TH2F("Eparton_vs_Phiparton-Phinonbjet","Eparton_vs_Phiparton-Phinonbjet", 5, 0, 250, 100, -0.3, 0.3);
  histoTr2D["Eparton_vs_Phibjet"] = new TH2F("Eparton_vs_Phibjet","Eparton_vs_Phibjet", 50, 0, 400, 120, -3.2, 3.2);
  histoTr2D["Eparton_vs_Phiparton-Phibjet"] = new TH2F("Eparton_vs_Phiparton-Phibjet","Eparton_vs_Phiparton-Phibjet", 5, 0, 300, 100, -0.2, 0.2);
  histoTr2D["EgenEl_vs_PhirecEl"] = new TH2F("EgenEl_vs_PhirecEl","EgenEl_vs_PhirecEl", 50, 0, 400, 120, -3.2, 3.2);
  histoTr2D["EgenEl_vs_PhigenEl-PhirecEl"] = new TH2F("EgenEl_vs_PhigenEl-PhirecEl","EgenEl_vs_PhigenEl-PhirecEl", 5, 0, 400, 100, -0.05, 0.05);
  histoTr2D["InvPtgenMu_vs_PhirecMu"] = new TH2F("InvPtgenMu_vs_PhirecMu","InvPtgenMu_vs_PhirecMu", 50, 0, 0.05, 120, -3.2, 3.2);
  histoTr2D["InvPtgenMu_vs_PhigenMu-PhirecMu"] = new TH2F("InvPtgenMu_vs_PhigenMu-PhirecMu","InvPtgenMu_vs_PhigenMu-PhirecMu", 5, 0.002, 0.04, 100, -0.002, 0.002);
  
  std::cout << "   - Histograms booked" << std::endl;
}

void TransferFunctions::fillJets(std::vector<TLorentzVector> &parton, std::vector<TLorentzVector> &jet)
{
  /// 0,1: light jets from W; 2: hadronic b jet; 3: leptonic b jet
  
  /// Energy
  histoTr2D["Eparton_vs_Enonbjet"]->Fill(parton[0].E(),jet[0].E());
  histoTr2D["Eparton_vs_Eparton-Enonbjet"]->Fill(parton[0].E(),parton[0].E()-jet[0].E());
  histoTr2D["Eparton_vs_Enonbjet"]->Fill(parton[1].E(),jet[1].E());
  histoTr2D["Eparton_vs_Eparton-Enonbjet"]->Fill(parton[1].E(),parton[1].E()-jet[1].E());
  histoTr2D["Eparton_vs_Ebjet"]->Fill(parton[2].E(),jet[2].E());
  histoTr2D["Eparton_vs_Eparton-Ebjet"]->Fill(parton[2].E(),parton[2].E()-jet[2].E());
  histoTr2D["Eparton_vs_Ebjet"]->Fill(parton[3].E(),jet[3].E());
  histoTr2D["Eparton_vs_Eparton-Ebjet"]->Fill(parton[3].E(),parton[3].E()-jet[3].E());
  
  /// Theta
  histoTr2D["Thparton_vs_Thnonbjet"]->Fill(parton[0].Theta(),jet[0].Theta());
  histoTr2D["Thparton_vs_Thparton-Thnonbjet"]->Fill(parton[0].Theta(),parton[0].Theta()-jet[0].Theta());
  histoTr2D["Thparton_vs_Thnonbjet"]->Fill(parton[1].Theta(),jet[1].Theta());
  histoTr2D["Thparton_vs_Thparton-Thnonbjet"]->Fill(parton[1].Theta(),parton[1].Theta()-jet[1].Theta());
  histoTr2D["Thparton_vs_Thbjet"]->Fill(parton[2].Theta(),jet[2].Theta());
  histoTr2D["Thparton_vs_Thparton-Thbjet"]->Fill(parton[2].Theta(),parton[2].Theta()-jet[2].Theta());
  histoTr2D["Thparton_vs_Thbjet"]->Fill(parton[3].Theta(),jet[3].Theta());
  histoTr2D["Thparton_vs_Thparton-Thbjet"]->Fill(parton[3].Theta(),parton[3].Theta()-jet[3].Theta());
  histoTr2D["Eparton_vs_Thnonbjet"]->Fill(parton[0].E(),jet[0].Theta());
  histoTr2D["Eparton_vs_Thparton-Thnonbjet"]->Fill(parton[0].E(),parton[0].Theta()-jet[0].Theta());
  histoTr2D["Eparton_vs_Thnonbjet"]->Fill(parton[1].E(),jet[1].Theta());
  histoTr2D["Eparton_vs_Thparton-Thnonbjet"]->Fill(parton[1].E(),parton[1].Theta()-jet[1].Theta());
  histoTr2D["Eparton_vs_Thbjet"]->Fill(parton[2].E(),jet[2].Theta());
  histoTr2D["Eparton_vs_Thparton-Thbjet"]->Fill(parton[2].E(),parton[2].Theta()-jet[2].Theta());
  histoTr2D["Eparton_vs_Thbjet"]->Fill(parton[3].E(),jet[3].Theta());
  histoTr2D["Eparton_vs_Thparton-Thbjet"]->Fill(parton[3].E(),parton[3].Theta()-jet[3].Theta());

  /// Eta
  histoTr2D["Etaparton_vs_Etanonbjet"]->Fill(parton[0].Eta(),jet[0].Eta());
  histoTr2D["Etaparton_vs_Etaparton-Etanonbjet"]->Fill(parton[0].Eta(),parton[0].Eta()-jet[0].Eta());
  histoTr2D["Etaparton_vs_Etanonbjet"]->Fill(parton[1].Eta(),jet[1].Eta());
  histoTr2D["Etaparton_vs_Etaparton-Etanonbjet"]->Fill(parton[1].Eta(),parton[1].Eta()-jet[1].Eta());
  histoTr2D["Etaparton_vs_Etabjet"]->Fill(parton[2].Eta(),jet[2].Eta());
  histoTr2D["Etaparton_vs_Etaparton-Etabjet"]->Fill(parton[2].Eta(),parton[2].Eta()-jet[2].Eta());
  histoTr2D["Etaparton_vs_Etabjet"]->Fill(parton[3].Eta(),jet[3].Eta());
  histoTr2D["Etaparton_vs_Etaparton-Etabjet"]->Fill(parton[3].Eta(),parton[3].Eta()-jet[3].Eta());
  histoTr2D["Eparton_vs_Etanonbjet"]->Fill(parton[0].E(),jet[0].Eta());
  histoTr2D["Eparton_vs_Etaparton-Etanonbjet"]->Fill(parton[0].E(),parton[0].Eta()-jet[0].Eta());
  histoTr2D["Eparton_vs_Etanonbjet"]->Fill(parton[1].E(),jet[1].Eta());
  histoTr2D["Eparton_vs_Etaparton-Etanonbjet"]->Fill(parton[1].E(),parton[1].Eta()-jet[1].Eta());
  histoTr2D["Eparton_vs_Etabjet"]->Fill(parton[2].E(),jet[2].Eta());
  histoTr2D["Eparton_vs_Etaparton-Etabjet"]->Fill(parton[2].E(),parton[2].Eta()-jet[2].Eta());
  histoTr2D["Eparton_vs_Etabjet"]->Fill(parton[3].E(),jet[3].Eta());
  histoTr2D["Eparton_vs_Etaparton-Etabjet"]->Fill(parton[3].E(),parton[3].Eta()-jet[3].Eta());

  /// Phi
  histoTr2D["Phiparton_vs_Phinonbjet"]->Fill(parton[0].Phi(),jet[0].Phi());
  histoTr2D["Phiparton_vs_Phinonbjet"]->Fill(parton[1].Phi(),jet[1].Phi());
  histoTr2D["Eparton_vs_Phinonbjet"]->Fill(parton[0].E(),jet[0].Phi());
  histoTr2D["Eparton_vs_Phinonbjet"]->Fill(parton[1].E(),jet[1].Phi());
  float DeltaPhi_nonbjet1 = ROOT::Math::VectorUtil::DeltaPhi(parton[0],jet[0]);
  histoTr2D["Phiparton_vs_Phiparton-Phinonbjet"]->Fill(parton[0].Phi(),DeltaPhi_nonbjet1);
  histoTr2D["Eparton_vs_Phiparton-Phinonbjet"]->Fill(parton[0].E(),DeltaPhi_nonbjet1);
  float DeltaPhi_nonbjet2 = ROOT::Math::VectorUtil::DeltaPhi(parton[1],jet[1]);
  histoTr2D["Phiparton_vs_Phiparton-Phinonbjet"]->Fill(parton[1].Phi(),DeltaPhi_nonbjet2);
  histoTr2D["Eparton_vs_Phiparton-Phinonbjet"]->Fill(parton[1].E(),DeltaPhi_nonbjet2);

  histoTr2D["Phiparton_vs_Phibjet"]->Fill(parton[2].Phi(),jet[2].Phi());
  histoTr2D["Phiparton_vs_Phibjet"]->Fill(parton[3].Phi(),jet[3].Phi());
  histoTr2D["Eparton_vs_Phibjet"]->Fill(parton[2].E(),jet[2].Phi());
  histoTr2D["Eparton_vs_Phibjet"]->Fill(parton[3].E(),jet[3].Phi());
  float DeltaPhi_bjet1 = ROOT::Math::VectorUtil::DeltaPhi(parton[2],jet[3]);
  histoTr2D["Phiparton_vs_Phiparton-Phibjet"]->Fill(parton[2].Phi(),DeltaPhi_bjet1);
  histoTr2D["Eparton_vs_Phiparton-Phibjet"]->Fill(parton[2].E(),DeltaPhi_bjet1);
  float DeltaPhi_bjet2 = ROOT::Math::VectorUtil::DeltaPhi(parton[3],jet[3]);
  histoTr2D["Phiparton_vs_Phiparton-Phibjet"]->Fill(parton[3].Phi(),DeltaPhi_bjet2);
  histoTr2D["Eparton_vs_Phiparton-Phibjet"]->Fill(parton[3].E(),DeltaPhi_bjet2);
  
}

void TransferFunctions::fillMuon(TLorentzVector* genMu, TLorentzVector* recMu)
{
  
  muon = true;
  
  float InvPtgenMu = 1./genMu->Pt();
  float InvPtrecMu = 1./recMu->Pt();
  histoTr2D["InvPtgenMu_vs_InvPtrecMu"]->Fill(InvPtgenMu,InvPtrecMu);
  histoTr2D["InvPtgenMu_vs_InvPtgenMu-InvPtrecMu"]->Fill(InvPtgenMu,InvPtgenMu-InvPtrecMu);
  
  histoTr2D["ThgenMu_vs_ThrecMu"]->Fill(genMu->Theta(),recMu->Theta());
  histoTr2D["ThgenMu_vs_ThgenMu-ThrecMu"]->Fill(genMu->Theta(),genMu->Theta()-recMu->Theta());
  histoTr2D["InvPtgenMu_vs_ThrecMu"]->Fill(1./genMu->Pt(),recMu->Theta());
  histoTr2D["InvPtgenMu_vs_ThgenMu-ThrecMu"]->Fill(1./genMu->Pt(),genMu->Theta()-recMu->Theta());
  
  histoTr2D["EtagenMu_vs_EtarecMu"]->Fill(genMu->Eta(),recMu->Eta());
  histoTr2D["EtagenMu_vs_EtagenMu-EtarecMu"]->Fill(genMu->Eta(),genMu->Eta()-recMu->Eta());
  histoTr2D["InvPtgenMu_vs_EtarecMu"]->Fill(1./genMu->Pt(),recMu->Eta());
  histoTr2D["InvPtgenMu_vs_EtagenMu-EtarecMu"]->Fill(1./genMu->Pt(),genMu->Eta()-recMu->Eta());
  
  histoTr2D["PhigenMu_vs_PhirecMu"]->Fill(genMu->Phi(),recMu->Phi());
  histoTr2D["InvPtgenMu_vs_PhirecMu"]->Fill(1./genMu->Pt(),recMu->Phi());
  float DeltaPhi = ROOT::Math::VectorUtil::DeltaPhi((TLorentzVector)*genMu,(TLorentzVector)*recMu);
  histoTr2D["PhigenMu_vs_PhigenMu-PhirecMu"]->Fill(genMu->Phi(),DeltaPhi);
  histoTr2D["InvPtgenMu_vs_PhigenMu-PhirecMu"]->Fill(1./genMu->Pt(),DeltaPhi);
  
}

void TransferFunctions::fillElectron(TLorentzVector* genEl, TLorentzVector* recEl)
{
  
  electron = true;
  
  histoTr2D["EgenEl_vs_ErecEl"]->Fill(genEl->E(),recEl->E());
  histoTr2D["EgenEl_vs_EgenEl-ErecEl"]->Fill(genEl->E(),genEl->E()-recEl->E());
  
  histoTr2D["ThgenEl_vs_ThrecEl"]->Fill(genEl->Theta(),recEl->Theta());
  histoTr2D["ThgenEl_vs_ThgenEl-ThrecEl"]->Fill(genEl->Theta(),genEl->Theta()-recEl->Theta());
  histoTr2D["EgenEl_vs_ThrecEl"]->Fill(genEl->E(),recEl->Theta());
  histoTr2D["EgenEl_vs_ThgenEl-ThrecEl"]->Fill(genEl->E(),genEl->Theta()-recEl->Theta());
  
  histoTr2D["EtagenEl_vs_EtarecEl"]->Fill(genEl->Eta(),recEl->Eta());
  histoTr2D["EtagenEl_vs_EtagenEl-EtarecEl"]->Fill(genEl->Eta(),genEl->Eta()-recEl->Eta());
  histoTr2D["EgenEl_vs_EtarecEl"]->Fill(genEl->E(),recEl->Eta());
  histoTr2D["EgenEl_vs_EtagenEl-EtarecEl"]->Fill(genEl->E(),genEl->Eta()-recEl->Eta());
  
  histoTr2D["PhigenEl_vs_PhirecEl"]->Fill(genEl->Phi(),recEl->Phi());
  histoTr2D["EgenEl_vs_PhirecEl"]->Fill(genEl->E(),recEl->Phi());
  float DeltaPhi = ROOT::Math::VectorUtil::DeltaPhi((TLorentzVector)*genEl,(TLorentzVector)*recEl);
  histoTr2D["PhigenEl_vs_PhigenEl-PhirecEl"]->Fill(genEl->Phi(),DeltaPhi);
  histoTr2D["EgenEl_vs_PhigenEl-PhirecEl"]->Fill(genEl->E(),DeltaPhi);
  
}

void TransferFunctions::writeHistograms()
{
  /// Define output file outside of function
  // Give it as argument?
  
  histoTr2D["Eparton_vs_Enonbjet"]->Write();
  histoTr2D["Eparton_vs_Ebjet"]->Write();
  histoTr2D["Thparton_vs_Thnonbjet"]->Write();
  histoTr2D["Thparton_vs_Thbjet"]->Write();
  histoTr2D["Etaparton_vs_Etanonbjet"]->Write();
  histoTr2D["Etaparton_vs_Etabjet"]->Write();
  histoTr2D["Phiparton_vs_Phinonbjet"]->Write();
  histoTr2D["Phiparton_vs_Phibjet"]->Write();
  histoTr2D["Eparton_vs_Thnonbjet"]->Write();
  histoTr2D["Eparton_vs_Thbjet"]->Write();
  histoTr2D["Eparton_vs_Etanonbjet"]->Write();
  histoTr2D["Eparton_vs_Etabjet"]->Write();
  histoTr2D["Eparton_vs_Phinonbjet"]->Write();
  histoTr2D["Eparton_vs_Phibjet"]->Write();
  
  histoTr2D["Eparton_vs_Eparton-Enonbjet"]->Write();
  histoTr2D["Eparton_vs_Eparton-Ebjet"]->Write();
  histoTr2D["Eparton_vs_Thparton-Thnonbjet"]->Write();
  histoTr2D["Eparton_vs_Thparton-Thbjet"]->Write();
  histoTr2D["Eparton_vs_Etaparton-Etanonbjet"]->Write();
  histoTr2D["Eparton_vs_Etaparton-Etabjet"]->Write();
  histoTr2D["Eparton_vs_Phiparton-Phinonbjet"]->Write();
  histoTr2D["Eparton_vs_Phiparton-Phibjet"]->Write();
  
  histoTr2D["Thparton_vs_Thparton-Thnonbjet"]->Write();
  histoTr2D["Thparton_vs_Thparton-Thbjet"]->Write();
  histoTr2D["Etaparton_vs_Etaparton-Etanonbjet"]->Write();
  histoTr2D["Thparton_vs_Thparton-Thbjet"]->Write();
  histoTr2D["Phiparton_vs_Phiparton-Phinonbjet"]->Write();
  histoTr2D["Phiparton_vs_Phiparton-Phibjet"]->Write();
  
  if (muon)
  {
    histoTr2D["InvPtgenMu_vs_InvPtrecMu"]->Write();
    histoTr2D["ThgenMu_vs_ThrecMu"]->Write();
    histoTr2D["EtagenMu_vs_EtarecMu"]->Write();
    histoTr2D["PhigenMu_vs_PhirecMu"]->Write();
    histoTr2D["InvPtgenMu_vs_ThrecMu"]->Write();
    histoTr2D["InvPtgenMu_vs_EtarecMu"]->Write();
    histoTr2D["InvPtgenMu_vs_PhirecMu"]->Write();
    
    histoTr2D["InvPtgenMu_vs_InvPtgenMu-InvPtrecMu"]->Write();
    histoTr2D["InvPtgenMu_vs_ThgenMu-ThrecMu"]->Write();
    histoTr2D["InvPtgenMu_vs_EtagenMu-EtarecMu"]->Write();
    histoTr2D["InvPtgenMu_vs_PhigenMu-PhirecMu"]->Write();
    
    histoTr2D["ThgenMu_vs_ThgenMu-ThrecMu"]->Write();
    histoTr2D["EtagenMu_vs_EtagenMu-EtarecMu"]->Write();
    histoTr2D["PhigenMu_vs_PhigenMu-PhirecMu"]->Write();
  }
  
  if (electron)
  {
    histoTr2D["EgenEl_vs_ErecEl"]->Write();
    histoTr2D["ThgenEl_vs_ThrecEl"]->Write();
    histoTr2D["EtagenEl_vs_EtarecEl"]->Write();
    histoTr2D["PhigenEl_vs_PhirecEl"]->Write();
    histoTr2D["EgenEl_vs_ThrecEl"]->Write();
    histoTr2D["EgenEl_vs_EtarecEl"]->Write();
    histoTr2D["EgenEl_vs_PhirecEl"]->Write();
    
    histoTr2D["EgenEl_vs_EgenEl-ErecEl"]->Write();
    histoTr2D["EgenEl_vs_ThgenEl-ThrecEl"]->Write();
    histoTr2D["EgenEl_vs_EtagenEl-EtarecEl"]->Write();
    histoTr2D["EgenEl_vs_PhigenEl-PhirecEl"]->Write();
    
    histoTr2D["ThgenEl_vs_ThgenEl-ThrecEl"]->Write();
    histoTr2D["EtagenEl_vs_EtagenEl-EtarecEl"]->Write();
    histoTr2D["PhigenEl_vs_PhigenEl-PhirecEl"]->Write();
  }
  
  std::cout << "TransferFunctions: Histograms written to file" << std::endl;
  makeFit();
}

void TransferFunctions::makeFit()
{
  std::cout << "                   Starting fit procedure... " << std::endl;
  
  
  for (int f = 0; f < nHistos; f++)
  {
    if (! muon && (f == 8 || f == 9 || f == 10 || f == 11) ) continue;
    if (! electron && (f == 12 || f == 13 || f == 14 || f == 15) ) continue;
    
    if (electron) std::cout << "TransferFunctions::WriteOutputFiles -- WARNING: Electron fitting not yet implemented" << std::endl;
    if ( f == 2 || f == 6 || f == 10 || f == 14 ) continue;  // eta later
    
    std::cout << "  - Current histogram:  " << histoNames[f] << std::endl;
    
    TH2F* histo=histoTr2D[(histoNames[f]).c_str()];
    if (getHistos)
      histo=fitHisto2D[(histoNames[f]).c_str()];
       
//    if (f == 0) histo=histoTr2D["Eparton_vs_Eparton-Enonbjet"];     //1
//    if (f == 1) histo=histoTr2D["Eparton_vs_Eparton-Ebjet"];        //2
//    if (f == 2) histo=histoTr2D["Eparton_vs_Thparton-Thnonbjet"];   //4
//    if (f == 3) histo=histoTr2D["Eparton_vs_Thparton-Thbjet"];      //5
//    if (f == 4) histo=histoTr2D["Eparton_vs_Etaparton-Etanonbjet"];
//    if (f == 5) histo=histoTr2D["Eparton_vs_Etaparton-Etabjet"];
//    if (f == 6) histo=histoTr2D["Eparton_vs_Phiparton-Phinonbjet"]; //8
//    if (f == 7) histo=histoTr2D["Eparton_vs_Phiparton-Phibjet"];    //9
//    if (f == 8) histo=histoTr2D["InvPtgenMu_vs_InvPtgenMu-InvPtrecMu"]; //3
//    if (f == 9) histo=histoTr2D["InvPtgenMu_vs_ThgenMu-ThrecMu"];   //7
//    if (f == 10) histo=histoTr2D["InvPtgenMu_vs_EtagenMu-EtarecMu"];
//    if (f == 11) histo=histoTr2D["InvPtgenMu_vs_PhigenMu-PhirecMu"]; //11
//    if (f == 12) histo=histoTr2D["EgenEl_vs_EgenEl-ErecEl"];         //3
//    if (f == 13) histo=histoTr2D["EgenEl_vs_ThgenEl-ThrecEl"];      //6
//    if (f == 14) histo=histoTr2D["EgenEl_vs_EtagenEl-EtarecEl"];
//    if (f == 15) histo=histoTr2D["EgenEl_vs_PhigenEl-PhirecEl"];    //10
    
    int nBins = histo->GetXaxis()->GetNbins();
    std::cout << "nbins: " << nBins << std::endl;
    //int nPar = 6;
    int nPar = 5;
    
    /// Create one histogram for each function parameter -> 6 histograms for each 2D plot
    TH1D **hlist = new TH1D*[nPar];
    //std::string parnames[nPar]={"a1","a2","a3","a4","a5","a6"};
    std::string parnames[nPar]={"a1","a2","a3","a4","a5"};
    std::string name=""; std::string title="";
    const TArrayD *bins = histo->GetXaxis()->GetXbins();
    for (int iPar = 0; iPar < nPar; iPar++)
    {
      name = std::string(histo->GetName())+ "_" + parnames[iPar];
      title = std::string(histo->GetName())+ ": Fitted value of " + parnames[iPar] ;
      hlist[iPar] = new TH1D(name.c_str(), title.c_str(), nBins, histo->GetXaxis()->GetXmin(), histo->GetXaxis()->GetXmax());
      hlist[iPar]->GetXaxis()->SetTitle(histo->GetXaxis()->GetTitle());
    }
    
    /// Loop on all bins in X, generate a projection along Y
    int cut = 0;  // require a minimum number of bins in the slice to be filled
    for (int xBin = 1; xBin < nBins+1; xBin++)
    {
      /// Make projection
      std::string projection_title = std::string(histo->GetName())+"_sliceXbin"+toStr(xBin);
      TH1D *hp = histo->ProjectionY(projection_title.c_str(), xBin, xBin, "e");
      if(xBin == nBins) hp = histo->ProjectionY(projection_title.c_str(), xBin, xBin+1, "e");  //include overflow in last bin
      if(xBin == 1) hp = histo->ProjectionY(projection_title.c_str(), xBin-1, xBin, "e");  //include underflow in first bin
      if (hp == 0) continue;
      float nEntries = float(hp->GetEntries());
      if (nEntries == 0 || nEntries < cut) {delete hp; continue;}
      
      
      /// Declare the fit function
      //  ! Its range depends on the jet/lepton energy range (hence, the Y-axis)
      //TF1 *myfit = new TF1("myfit", "[2]*(TMath::Exp(-TMath::Power((x-[0]),2)/(2*TMath::Power([1],2)))+[5]*TMath::Exp(-TMath::Power((x-[3]),2)/(2*TMath::Power([4],2))))");
      //TF1 *myfit = new TF1("myfit", "(1./TMath::Sqrt(2*TMath::Pi())) * (1./([1]+[2]*[4]))*( TMath::Exp(-TMath::Power((x-[0]),2)/(2*TMath::Power([1],2))) + [2]*TMath::Exp(-TMath::Power((x-[3]),2)/(2*TMath::Power([4],2))) )");
      TF1 *myfit = new TF1("myfit", "(1./([1]+[2]*[4]))*( TMath::Exp(-TMath::Power((x-[0]),2)/(2*TMath::Power([1],2))) + [2]*TMath::Exp(-TMath::Power((x-[3]),2)/(2*TMath::Power([4],2))) )");
      
      //  Give names to the parameters
      myfit->SetParName(0,"a1");
      myfit->SetParName(1,"a2");
      myfit->SetParName(2,"a3");
      myfit->SetParName(3,"a4");
      myfit->SetParName(4,"a5");
      //myfit->SetParName(5,"a6");
      //  Set initial values
      if ( f == 0 || f == 4 )  // energy (non-)b jet
      {
        //myfit->SetParameter(0, -2.5);    //central value of first, broad gaussian
        //myfit->SetParameter(1, 40.0);    //sigma value of first, broad gaussian
        //myfit->SetParameter(2, 63.0);    //constant value of first, broad gaussian
        //myfit->SetParameter(3, -0.0005); //central value of second, narrow gaussian
        //myfit->SetParameter(4, 6.0);     //sigma value of second, narrow gaussian
        //myfit->SetParameter(5, 4.1);     //constant value of second, narrow gaussian
        myfit->SetParameter(0, 0.5);   //central value of first, broad gaussian
        myfit->SetParameter(1, 20.0);  //sigma value of first, broad gaussian
        myfit->SetParameter(2, 100.0); //constant value of second, narrow gaussian
        myfit->SetParameter(3, 0.05);  //central value of second, narrow gaussian
        myfit->SetParameter(4, 6.0);   //sigma value of second, narrow gaussian
      }
      else if ( f == 1 || f == 3 || f == 5 || f == 7 )  // theta & phi of jet (CHECK: also eta??)
      {
        //myfit->SetParameter(0, 0.0); 		//central value of first, broad gaussian
        //myfit->SetParameter(1, 0.3);    //sigma value of first, broad gaussian
        //myfit->SetParameter(2, 77.0);   //constant value of first, broad gaussian
        //myfit->SetParameter(3, 0.0004); //central value of second, narrow gaussian
        //myfit->SetParameter(4, 0.001);  //sigma value of second, narrow gaussian
        //myfit->SetParameter(5, 26.5);   //constant value of second, narrow gaussian
        myfit->SetParameter(0, 0.0); 		//central value of first, broad gaussian
        myfit->SetParameter(1, 0.05);   //sigma value of first, broad gaussian
        myfit->SetParameter(2, 100.0);  //constant value of second, narrow gaussian
        myfit->SetParameter(3, 0.0005); //central value of second, narrow gaussian
        myfit->SetParameter(4, 0.01);   //sigma value of second, narrow gaussian
      }
      else if ( f == 8 )  // inv pt muon
      {
        //myfit->SetParameter(0, -0.008);  //central value of first, broad gaussian
        //myfit->SetParameter(1, 0.01);    //sigma value of first, broad gaussian
        //myfit->SetParameter(2, 24.0);    //constant value of first, broad gaussian
        //myfit->SetParameter(3, -0.0002); //central value of second, narrow gaussian
        //myfit->SetParameter(4, 0.00002); //sigma value of second, narrow gaussian
        //myfit->SetParameter(5, 19.0);    //constant value of second, narrow gaussian
        myfit->SetParameter(0, -0.008);  //central value of first, broad gaussian
        myfit->SetParameter(1, 0.002);   //sigma value of first, broad gaussian
        myfit->SetParameter(2, 100.0);   //constant value of second, narrow gaussian
        myfit->SetParameter(3, -0.0002); //central value of second, narrow gaussian
        myfit->SetParameter(4, 0.0002);  //sigma value of second, narrow gaussian
      }
      else if ( f == 9 || f == 11 )  // theta & phi of muon (CHECK: also eta??)
      {
        //myfit->SetParameter(0, 0.0); 		 //central value of first, broad gaussian
        //myfit->SetParameter(1, 0.01);    //sigma value of first, broad gaussian
        //myfit->SetParameter(2, 24.0); 	 //constant value of first, broad gaussian
        //myfit->SetParameter(3, 0.0);     //central value of second, narrow gaussian
        //myfit->SetParameter(4, 0.00001); //sigma value of second, narrow gaussian
        //myfit->SetParameter(5, 4.0);     //constant value of second, narrow gaussian
        myfit->SetParameter(0, 0.0); 		 //central value of first, broad gaussian
        myfit->SetParameter(1, 0.0005);  //sigma value of first, broad gaussian
        myfit->SetParameter(2, 100.0); 	 //constant value of second, narrow gaussian
        myfit->SetParameter(3, 0.0);     //central value of second, narrow gaussian
        myfit->SetParameter(4, 0.00001); //sigma value of second, narrow gaussian
      }
      
      //  Fit
      std::string func_title = std::string(histo->GetName())+"_sliceXbin"+toStr(xBin)+"_Fitted";
      myfit->SetName(func_title.c_str());
      hp->Fit(myfit);
      int npFits = myfit->GetNumberFitPoints();
      if (npFits > nPar && npFits >= cut)
      {
        int binOn = xBin + 1/2;
        for (int iPar = 0; iPar < nPar; iPar++)
        {
          //std::cout << "histo->GetXaxis()->GetBinCenter(binOn): " << histo->GetXaxis()->GetBinCenter(binOn) << std::endl;
          //std::cout << "myfit->GetParameter("<<ipar<<") " << myfit->GetParameter(ipar) << std::endl;
          hlist[iPar]->Fill(histo->GetXaxis()->GetBinCenter(binOn),myfit->GetParameter(iPar)); // fill histogram for parameter i
          hlist[iPar]->SetBinError(histo->GetXaxis()->GetBinCenter(binOn),myfit->GetParError(iPar));
        }
        //hchi2->Fill(histo->GetXaxis()->GetBinCenter(binOn),myfit->GetChisquare()/(npfits-npar));
      }
      hp->Write();
      myfit->Write();
      
      delete hp;
      delete myfit;
      
    }  // end loop bins
    
    
    /// Define the fitfunction for all parameters (6):
    //  ai = ai0 + ai1*Ep + ai2*sqrt(Ep)
    //  Its range depends on the parton energy range (hence, the X-axis)
    //TF1 *myfit2 = new TF1("myfit2", "[0]+[1]*x+[2]*sqrt(x)", histo->GetXaxis()->GetXmin(), histo->GetXaxis()->GetXmax());
    TF1 *myfit2 = new TF1("myfit2", "[0]+[1]*x", histo->GetXaxis()->GetXmin(), histo->GetXaxis()->GetXmax());
    // Give names to the parameters
    myfit2->SetParName(0,"ai0");
    myfit2->SetParName(1,"ai1");
    //myfit2->SetParName(2,"ai2");

    for (int iPar = 0; iPar < nPar; iPar++){
      int paramname = iPar+1;
      std::string func_title2 = std::string(histo->GetName())+"_a"+toStr(paramname)+"_Fitted";
      myfit2->SetName(func_title2.c_str());
      hlist[iPar]->Fit(myfit2);
      hlist[iPar]->Write();
      myfit2->Write();
    }
    
    delete [] hlist;
    delete myfit2;
    
  }  /// end loop on histos (f)
  
  
  //writeTable();
}

void TransferFunctions::makeFit(std::string inputFileName, std::string outputFileName)
{
  std::cout << "TransferFunctions::Getting histograms from file  " << inputFileName << std::endl;
  getHistos = true;
  
  TFile *fin = new TFile(inputFileName.c_str(),"read");
  fin->cd();
  
  for (int iHisto = 0; iHisto < nHistos; iHisto++)
  {
    if ( fin->GetListOfKeys()->Contains((histoNames[iHisto]).c_str()) )
    {
      fitHisto2D[histoNames[iHisto]] = (TH2F*) fin->Get((histoNames[iHisto]).c_str());
      if ( iHisto == 8 || iHisto == 9 || iHisto == 10 || iHisto == 11 ) muon = true;
      if ( iHisto == 12 || iHisto == 13 || iHisto == 14 || iHisto == 15) electron = true;
    }
  }
  
  
  TFile *foutTF = new TFile(outputFileName.c_str(), "RECREATE");
  foutTF->cd();
  
  for (int f = 0; f < nHistos; f++)
  {
    if (! muon && (f == 8 || f == 9 || f == 10 || f == 11) ) continue;
    if (! electron && (f == 12 || f == 13 || f == 14 || f == 15) ) continue;
    fitHisto2D[histoNames[f]]->Write();
  }
  
  makeFit();
  
  fin->Close();
  foutTF->Close();
  
  delete fin;
  delete foutTF;
}

void TransferFunctions::writeTable(std::string inputFileName)
{
  std::cout << "TransferFunctions::Writing table with parameters..." << std::endl;
  
  std::ofstream myTransferFunctions;
  std::string myTransferFunctions_TABLE = "TransferFunctions_TABLE.txt";
  myTransferFunctions.open(myTransferFunctions_TABLE.c_str());
  
  for(int f = 0; f < nHistos; f++)
  {
    TF1 *TF_par1,*TF_par2,*TF_par3,*TF_par4,*TF_par5,*TF_par6;
    std::string name1 = histoNames[f]+"_a1_Fitted";
    std::string name2 = histoNames[f]+"_a2_Fitted";
    std::string name3 = histoNames[f]+"_a3_Fitted";
    std::string name4 = histoNames[f]+"_a4_Fitted";
    std::string name5 = histoNames[f]+"_a5_Fitted";
    std::string name6 = histoNames[f]+"_a6_Fitted";
    
    TFile* tf = new TFile(inputFileName.c_str(),"READ");
    tf->cd();
    TF_par1 = (TF1*)tf->Get(name1.c_str());
    TF_par2 = (TF1*)tf->Get(name2.c_str());
    TF_par3 = (TF1*)tf->Get(name3.c_str());
    TF_par4 = (TF1*)tf->Get(name4.c_str());
    TF_par5 = (TF1*)tf->Get(name5.c_str());
    TF_par6 = (TF1*)tf->Get(name6.c_str());
    
    /// Write values to table
    if (TF_par1 && TF_par2 && TF_par3 && TF_par4 && TF_par5 && TF_par6)
    {
      myTransferFunctions<< std::endl;
      myTransferFunctions<<"\\begin{table}" << std::endl;
      myTransferFunctions<<"\\caption{Parameters of the transfer function for the " << histoDescription[f]  << "}" << std::endl;
      myTransferFunctions<<"\\label{tab:}" << std::endl;
      myTransferFunctions<<"\\centering" << std::endl;
      myTransferFunctions<<"\\begin{tabular}{c|ccc}" << std::endl;
      myTransferFunctions<<"\\hline" << std::endl;
      myTransferFunctions << "Type	& $a_{i0}$ & $a_{i1}$ ($\\sqrt{E}$) & $a_{i2}$ ($E$)" << "\\\\" << std::endl;
      myTransferFunctions<<"\\hline" << std::endl;
      myTransferFunctions << "Mean broad gaussian & $a_{10}$ = " << TF_par1->GetParameter(0) << "$\\pm$" << TF_par1->GetParError(0) << " & $a_{11}$ = " << TF_par1->GetParameter(1) << "$\\pm$" << TF_par1->GetParError(1) << " & $a_{12}$ = " << TF_par1->GetParameter(2) << "$\\pm$" << TF_par1->GetParError(2) << "\\\\" << std::endl;
      myTransferFunctions << "Width broad gaussian & $a_{20}$ = " << TF_par2->GetParameter(0) << "$\\pm$" << TF_par2->GetParError(0) << " & $a_{21}$ = " << TF_par2->GetParameter(1) << "$\\pm$" << TF_par2->GetParError(1) << " & $a_{22}$ = " << TF_par2->GetParameter(2) << "$\\pm$" << TF_par2->GetParError(2) << "\\\\" << std::endl;
      myTransferFunctions << "Constant broad gaussian & $a_{30}$ = " << TF_par3->GetParameter(0) << "$\\pm$" << TF_par3->GetParError(0) << " & $a_{31}$ = " << TF_par3->GetParameter(1) << "$\\pm$" << TF_par3->GetParError(1) << " & $a_{32}$ = " << TF_par3->GetParameter(2) << "$\\pm$" << TF_par3->GetParError(2) << "\\\\" << std::endl;
      myTransferFunctions << "Mean narrow gaussian & $a_{40}$ = " << TF_par4->GetParameter(0) << "$\\pm$" << TF_par4->GetParError(0) << " & $a_{41}$ = " << TF_par4->GetParameter(1) << "$\\pm$" << TF_par4->GetParError(1) << " & $a_{42}$ = " << TF_par4->GetParameter(2) << "$\\pm$" << TF_par4->GetParError(2) << "\\\\" << std::endl;
      myTransferFunctions << "Width narrow gaussian & $a_{50}$ = " << TF_par5->GetParameter(0) << "$\\pm$" << TF_par5->GetParError(0) << " & $a_{51}$ = " << TF_par5->GetParameter(1) << "$\\pm$" << TF_par5->GetParError(1) << " & $a_{52}$ = " << TF_par5->GetParameter(2) << "$\\pm$" << TF_par5->GetParError(2) << "\\\\" << std::endl;
      myTransferFunctions << "Constant narrow gaussian & $a_{60}$ = " << TF_par6->GetParameter(0) << "$\\pm$" << TF_par6->GetParError(0) << " & $a_{61}$ = " << TF_par6->GetParameter(1) << "$\\pm$" << TF_par6->GetParError(1) << " & $a_{62}$ = " << TF_par6->GetParameter(2) << "$\\pm$" << TF_par6->GetParError(2) << "\\\\" << std::endl;
      myTransferFunctions<<"\\hline" << std::endl;
      myTransferFunctions<<"\\end{tabular}"<< std::endl;
      myTransferFunctions<<"\\end{table}"<<std::endl;
      myTransferFunctions<< std::endl;
    }
    tf->Close();
  }
  
  myTransferFunctions.close();
  
}
